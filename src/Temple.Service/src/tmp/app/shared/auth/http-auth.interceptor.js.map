{"version":3,"sources":["app/shared/auth/http-auth.interceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwG,eAAe,CAAC,CAAA;AACxH,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,2BAA2B,CAAC,CAAA;AACnC,QAAO,2BAA2B,CAAC,CAAA;AACnC,QAAO,yBAAyB,CAAC,CAAA;AAEjC,mCAAiC,sBAAsB,CAAC,CAAA;AACxD,2BAA0B,cAAc,CAAC,CAAA;AAGzC;IAAyC,uCAAI;IAEzC,6BAAY,OAA0B,EAAE,cAA8B,EAAU,gBAAkC;QAC9G,kBAAM,OAAO,EAAE,cAAc,CAAC,CAAC;QAD6C,qBAAgB,GAAhB,gBAAgB,CAAkB;IAElH,CAAC;IAED,qCAAO,GAAP,UAAQ,GAAqB,EAAE,OAA4B;QACvD,MAAM,CAAC,gBAAK,CAAC,OAAO,YAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,iCAAG,GAAH,UAAI,GAAW,EAAE,OAA4B;QAA7C,iBAQC;QAPG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;YACnD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,gBAAK,CAAC,GAAG,aAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;YACR,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,uBAAU,CAAC,KAAK,EAAY,CAAC;QACxC,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,kCAAI,GAAJ,UAAK,GAAW,EAAE,IAAY,EAAE,OAA4B;QAA5D,iBAKC;QAJG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;aACpC,SAAS,CAAC,UAAA,GAAG;YACV,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,gBAAK,CAAC,IAAI,aAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACX,CAAC;IAED,iCAAG,GAAH,UAAI,GAAW,EAAE,IAAY,EAAE,OAA4B;QAA3D,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;YACnD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,gBAAK,CAAC,GAAG,aAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mCAAK,GAAL,UAAM,GAAW,EAAE,IAAY,EAAE,OAA4B;QAA7D,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;YACnD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,gBAAK,CAAC,KAAK,aAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAM,GAAN,UAAO,GAAW,EAAE,OAA4B;QAAhD,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;YACnD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,gBAAK,CAAC,MAAM,aAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kDAAoB,GAApB,UAAqB,OAA4B;QAAjD,iBAoBC;QAnBG,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,IAAI,qBAAc,EAAE,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QACpC,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,IAAI;YAE3C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;gBACvE,MAAM,CAAC,OAAO,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;gBACzC,MAAM,IAAI,sBAAS,CAAC,yBAAyB,CAAC,CAAC;YACnD,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,uCAAS,GAAT,UAAU,UAAgC;QACtC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,UAAC,GAAG,EAAE,MAAM;YAChC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACrB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;gBAC3C,4CAA4C;gBAC5C,MAAM,CAAC,uBAAU,CAAC,KAAK,EAAY,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IA/EL;QAAC,iBAAU,EAAE;;2BAAA;IAgFb,0BAAC;AAAD,CA/EA,AA+EC,CA/EwC,WAAI,GA+E5C;AA/EY,2BAAmB,sBA+E/B,CAAA","file":"http-auth.interceptor.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Request, RequestOptionsArgs, Response, RequestOptions, ConnectionBackend, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { AuthEventService } from './auth-event.service';\r\nimport { AuthError } from './auth.error';\r\n\r\n@Injectable()\r\nexport class HttpAuthInterceptor extends Http {\r\n\r\n    constructor(backend: ConnectionBackend, defaultOptions: RequestOptions, private authEventService: AuthEventService) {\r\n        super(backend, defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n        return super.request(url, options);\r\n    }\r\n\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.getRequestOptionArgs(options).switchMap(ops => {\r\n            return this.intercept(super.get(url, ops));\r\n        }).catch(err => {\r\n            console.log('The call is not authorized: ', err);\r\n            return Observable.empty<Response>();\r\n        });\r\n\r\n    }\r\n\r\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.getRequestOptionArgs(options)\r\n            .switchMap(ops => {\r\n                return this.intercept(super.post(url, body, ops));\r\n            });\r\n    }\r\n\r\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.getRequestOptionArgs(options).switchMap(ops => {\r\n            return this.intercept(super.put(url, body, ops));\r\n        });\r\n    }\r\n\r\n    patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.getRequestOptionArgs(options).switchMap(ops => {\r\n            return this.intercept(super.patch(url, body, ops));\r\n        });\r\n    }\r\n\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.getRequestOptionArgs(options).switchMap(ops => {\r\n            return this.intercept(super.delete(url, ops));\r\n        });\r\n    }\r\n\r\n    getRequestOptionArgs(options?: RequestOptionsArgs): Observable<RequestOptionsArgs> {\r\n        if (options == null) {\r\n            options = new RequestOptions();\r\n        }\r\n        if (options.headers == null) {\r\n            options.headers = new Headers();\r\n        }\r\n\r\n\r\n        return this.authEventService.getUser().map(user => {\r\n\r\n            if (user != null && !user.expired) {\r\n                options.headers.append('Authorization', 'Bearer ' + user.access_token);\r\n                return options;\r\n            } else {\r\n                this.authEventService.authenticateUser();\r\n                throw new AuthError('You are not authroized.');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    intercept(observable: Observable<Response>): Observable<Response> {\r\n        return observable.catch((err, source) => {\r\n            if (err.status === 401) {\r\n                console.log('The call is not authorized.');\r\n                // this.authEventService.authenticateUser();\r\n                return Observable.empty<Response>();\r\n            } else {\r\n                return Observable.throw(err);\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n"]}